import pickle
import threading
import time
import tkinter as tk

import matplotlib.pyplot as plt
import numpy as np
import serial
from PIL import Image, ImageTk

from protocol import Protocol

# Server configuration
SERVER_HOST = '127.0.0.1'
SERVER_PORT = 5555

# Create a Protocol instance
client_protocol = Protocol()

# Connect to the server
client_protocol.connect((SERVER_HOST, SERVER_PORT))


# Function to send selected option to the server
def send_option(option):
    client_protocol.send_msg(option.encode("utf-8"))


# Function to handle button click events
def button_click():
    option = option_var.get()
    send_option(option)


# Load background image
background_image = Image.open("webroot/images/beach_sunset.png")

# Create the GUI window
root = tk.Tk()
root.title("Client GUI")
root.geometry("800x600")  # Initial size

# Display background image
background_photo = ImageTk.PhotoImage(background_image)
background_label = tk.Label(root, image=background_photo)
background_label.place(x=0, y=0)

# Create and place option menu
option_var = tk.StringVar(root)
option_var.set("Option 1")
option_menu = tk.OptionMenu(root, option_var, "Option 1", "Option 2", "Option 3")
option_menu.place(relx=0.1, rely=0.1)

# Create and place submit button
submit_button = tk.Button(root, text="Submit", command=button_click)
submit_button.place(relx=0.1, rely=0.2)

# Run the GUI event loop
root.mainloop()

# Close the connection
client_protocol.close()


def arduino():
    global dofek
    try:
        # Define the serial port and baud rate
        serial_port = 'COM3'  # Change this to the appropriate port
        baud_rate = 9600

        # Connect to the Arduino board
        ser = serial.Serial(serial_port, baud_rate, timeout=1)

        while True:
            # Wait for a message from Arduino
            response = ser.readline().decode('utf-8').strip()
            if response:
                # if int(response) == 100100:
                #     response = 10000
                dofek = int(response) // 55.5 + 40
    except Exception as e:
        print(e)
    # finally:
    #     ser.close()  # Close the serial port when done


heartrate = ['365', '369', '370', '365', '358', '351', '344', '340', '343', '345', '350', '357', '365', '369', '370',
             '365', '358', '351', '344', '340', '343', '345', '350', '357', '365', '369', '370', '365', '358', '351',
             '344', '340', '360', '352', '345', '340', '337', '336', '337', '338', '340', '342', '344', '345', '346',
             '346', '345', '344', '342', '341', '341', '341', '340', '340', '340', '340', '340', '341', '342', '342',
             '343', '342', '342', '342', '342', '342', '342', '342', '343', '343', '347', '352', '360', '367', '369',
             '366', '361', '353', '346', '341', '338', '336', '336', '338', '339', '343', '344', '346', '347', '347',
             '346', '344', '342', '341', '340', '339', '339', '339', '340', '340', '340', '342', '342', '342', '343',
             '343', '343', '343', '343', '342', '342', '342', '342', '344', '348', '354', '362', '368', '368', '365',
             '359', '351', '345', '340', '336', '335', '336', '338', '341', '343', '346', '347', '347', '347', '345',
             '344', '342', '341', '339', '339', '339', '339', '340', '340', '341', '342', '343', '343', '343', '343',
             '343', '343', '343', '343', '342', '342', '342', '345', '350', '357', '364', '368', '368', '364', '357',
             '349', '342', '338', '335', '334', '335', '338', '341', '344', '347', '349', '349', '348', '346', '344',
             '343', '341', '340', '340', '340', '339', '341', '342', '343', '343', '344', '343', '343', '343', '344',
             '344', '344', '348', '355', '362', '367', '369', '365', '360', '352', '344', '339', '335', '334', '335',
             '337', '340', '343', '346', '349', '349', '348', '346', '344', '342', '340', '339', '339', '338', '340',
             '340', '341', '342', '343', '344', '343', '344', '344', '344', '342', '344', '349', '356', '364', '368',
             '368', '364', '357', '350', '343', '338', '336', '335', '337', '338', '341', '344', '346', '347', '347',
             '347', '346', '344', '343', '341', '341', '340', '340', '340', '341', '341', '341', '343', '343', '344',
             '343', '344', '343', '343', '343', '345', '350', '357', '364', '367', '367', '362', '356', '349', '342',
             '339', '336', '336', '337', '340', '342', '344', '346', '347', '347', '346', '345', '343', '342', '341',
             '340', '339', '340', '340', '341', '341', '342', '343', '343', '344', '343', '343', '343', '343', '342',
             '342', '343', '347', '352', '359', '365', '368', '366', '361', '354', '348', '342', '338', '336', '336',
             '338', '340', '344', '346', '348', '349', '349', '347', '344', '342', '341', '340', '339', '341', '341',
             '341', '343', '344', '344', '343', '344', '343', '343', '343', '343', '342', '343', '345', '350', '358',
             '365', '368', '367', '362', '354', '347', '342', '338', '337', '337', '339', '340', '343', '345', '346',
             '347', '346', '346', '344', '342', '341', '341', '340', '340', '340', '341', '341', '342', '342', '343',
             '343', '343', '343', '343', '343', '343', '343', '342', '343', '346', '353', '360', '365', '367', '366',
             '359', '352', '344', '339', '336', '335', '336', '338', '341', '343', '345', '346', '347', '347', '346',
             '345', '342', '340', '340', '339', '340', '340', '341', '341', '342', '342', '342', '343', '344', '343',
             '343', '343', '343', '343', '343', '342', '343', '345', '351', '358', '364', '366', '364', '360', '353',
             '346', '341', '337', '335', '335', '337', '340', '343', '345', '347', '348', '348', '345', '344', '342',
             '340', '339', '339', '339', '340', '341', '341', '342', '342', '343', '343', '343', '343', '343', '343',
             '343', '343', '343', '342', '345', '350', '356', '362', '365', '364', '361', '355', '348', '341', '338',
             '335', '335', '336', '339', '342', '345', '347', '348', '347', '347', '344', '342', '341', '340', '340',
             '339', '340', '341', '341', '342', '342', '342', '343', '343', '343', '343', '343', '343', '343', '344',
             '349', '354', '360', '365', '365', '362', '357', '352', '345', '341', '339', '337', '338', '340', '342',
             '344', '345', '346', '346', '345', '344', '344', '342', '341', '340', '340', '340', '340', '341', '341',
             '341', '342', '342', '343', '343', '343', '343', '343', '343', '343', '343', '345', '348', '353', '359',
             '363', '364', '361', '356', '352', '346', '342', '340', '339', '339', '340', '342', '344', '344', '345',
             '346', '345', '344', '343', '342', '341', '341', '340', '341', '341', '341', '342', '342', '342', '342',
             '343', '343', '343', '343', '343', '342', '342', '342', '343', '345', '348', '352', '357', '358', '358',
             '356', '351', '347', '344', '341', '340', '340', '340', '341', '343', '344', '345', '346', '345', '345',
             '344', '342', '342', '341', '342', '341', '340', '341', '341', '342', '342', '342', '342', '344', '343',
             '343', '343', '342', '343', '343', '344', '347', '351', '354', '357', '357', '355', '352', '349', '346',
             '343', '342', '342', '342', '342', '343', '344', '345', '345', '345', '345', '344', '344', '343', '342',
             '342', '342', '342', '342', '342', '342', '343', '343', '343', '343', '344', '344', '344', '344', '344',
             '343', '343', '343', '343', '344', '347', '351', '354', '358', '359', '358', '356', '352', '349', '346',
             '344', '344', '344', '344', '345', '346', '346', '346', '346', '346', '344', '344', '343', '342', '342',
             '343', '342', '342', '343', '343', '343', '343', '344', '344', '344', '344', '343', '343', '343', '343',
             '343', '344', '343', '343', '343', '344', '346', '351', '357', '364', '367', '367', '364', '358', '352',
             '347', '342', '340', '339', '340', '341', '342', '344', '346', '346', '346', '346', '345', '343', '341',
             '341', '341', '340', '341', '341', '341', '342', '342', '343', '343', '343', '343', '344', '343', '343',
             '342', '342', '343', '342', '342', '342', '343', '345', '350', '356', '363', '369', '370', '366', '360',
             '351', '346', '342', '338', '337', '338', '339', '342', '344', '346', '348', '348', '347', '346', '344',
             '342', '341', '340', '340', '341', '341', '342', '342', '342', '343', '342', '343', '343', '343', '342',
             '343', '343', '342', '342', '344', '348', '355', '363', '367', '369', '366', '359', '352', '345', '340',
             '338', '337', '338', '339', '342', '345', '346', '347', '348', '346', '346', '344', '342', '341', '340',
             '340', '340', '341', '341', '341', '342', '342', '343', '343', '343', '343', '343', '343', '343', '343',
             '342', '342', '343', '345', '350', '358', '364', '368', '367', '362', '355', '347', '342', '338', '336',
             '336', '338', '340', '343', '345', '346', '348', '348', '347', '345', '343', '341', '340', '340', '340',
             '340', '340', '341', '341', '342', '343', '343', '344', '344', '343', '344', '344', '343', '342', '343',
             '342', '344', '347', '352', '361', '365', '368', '365', '359', '351', '345', '339', '336', '335', '336',
             '337', '340', '343', '346', '348', '348', '348', '347', '344', '343', '341', '340', '340', '340', '339',
             '340', '340', '341', '342', '343', '343', '343', '343', '343', '343', '343', '343', '343', '342', '342',
             '346', '350', '357', '363', '366', '366', '361', '355', '347', '342', '338', '336', '335', '337', '339',
             '342', '345', '348', '349', '349', '348', '346', '343', '342', '340', '339', '340', '339', '340', '341',
             '341', '342', '342', '343', '343', '344', '344', '344', '344', '344', '343', '344', '347', '353', '360',
             '365', '366', '364', '359', '352', '346', '340', '337', '334', '335', '337', '340', '345', '347', '349',
             '350', '349', '347', '345', '343', '341', '340', '340', '339', '340', '341', '341', '342', '343', '343',
             '344', '344', '344', '343', '344', '346', '351', '357', '363', '367', '366', '361', '355', '348', '342',
             '338', '336', '336', '338', '340', '343', '346', '348', '349', '348', '347', '345', '343', '341', '341',
             '340', '339', '340', '340', '341', '342', '343', '343', '344', '344', '344', '343', '343', '342', '343',
             '344', '348', '354', '361', '367', '367', '363', '358', '351', '345', '339', '337', '336', '337', '340',
             '341', '344', '346', '347', '348', '347', '345', '344', '343', '340', '340', '340', '340', '340', '340',
             '342', '341', '343', '344', '344', '343', '344', '343', '343', '343', '342', '342', '343', '345', '351',
             '358', '364', '366', '364', '360', '353', '347', '341', '338', '336', '337', '338', '340', '343', '345',
             '347', '348', '347', '346', '345', '342', '341', '340', '340', '340', '340', '342', '342', '342', '343',
             '344', '344', '344', '344', '344', '345', '344', '343', '343', '346', '349', '355', '360', '364', '363',
             '360', '354', '347', '342', '339', '337', '336', '338', '341', '343', '345', '346', '348', '346', '346',
             '344', '343', '341', '340', '341', '340', '340', '341', '341', '341', '342', '343', '343', '344', '344',
             '344', '343', '344', '343', '342', '343', '343', '346', '352', '359', '365', '367', '365', '361', '355',
             '349', '343', '340', '339', '338', '339', '341', '343', '344', '345', '346', '346', '345', '344', '343',
             '342', '340', '341', '340', '341', '341', '341', '342', '343', '343', '344', '343', '343', '343', '343',
             '343', '343', '343', '342', '342', '342', '342', '343', '346', '352', '359', '366', '370', '368', '363',
             '356', '349', '343', '339', '337', '337', '338', '340', '343', '346', '347', '348', '348', '347', '346',
             '345', '343', '342', '341', '342', '342', '341', '341', '342', '342', '343', '342', '343', '342', '342',
             '341', '342', '341', '342', '342', '343', '342', '342', '343', '347', '352', '361', '366', '369', '367',
             '361', '352', '346', '340', '337', '335', '336', '338', '341', '343', '346', '347', '348', '348', '346',
             '344', '342', '341', '340', '339', '339', '339', '340', '341', '342', '342', '343', '343', '344', '344',
             '343', '343', '342', '343', '342', '342', '342', '342', '342', '343', '346', '353', '360', '366', '368',
             '366', '361', '354', '347', '341', '338', '336', '336', '337', '340', '344', '347', '349', '348', '348',
             '347', '345', '343', '341', '339', '339', '340', '339', '340', '341', '342', '343', '343', '343', '344',
             '344', '344', '344', '343', '343', '343', '343', '346', '351', '359', '365', '366', '364', '360', '352',
             '346', '341', '338', '336', '336', '338', '340', '342', '345', '347', '348', '348', '347', '344', '344',
             '343', '341', '341', '340', '340', '341', '341', '341', '343', '344', '343']


def mock_heartrate():
    ser = serial.Serial("COM4", 115200, timeout=1)
    i = 0
    count = 0
    ok = True
    now = time.perf_counter()
    while True:
        ser.write(heartrate[i].encode() + "\n".encode())
        data = heartrate[i]
        if ok and int(data) == 347:
            then = now
            now = time.perf_counter()
            count += 1
            print("time", now, then)
            print("heartbeat", count)
            print(60 / (now - then))
            ok = False
        elif int(data) < 347:
            ok = True
        time.sleep(0.02)
        i += 1
        if i == len(heartrate):
            i = 0


def record():
    data_ = []
    ser = serial.Serial("COM3", 115200, timeout=1)
    start = time.perf_counter()
    try:
        while time.perf_counter() - start < 30:
            response = ser.readline().decode("utf-8").strip()
            if response:
                data = response.split(",")[-1]
                data_.append(data)
        with open("data.txt", "wb") as f:
            pickle.dump(data_, f)
        print(data_)
    finally:
        ser.close()


data_write = 100


def get_bpm(serW):
    global data_write
    ser = serial.Serial("COM3", 115200, timeout=1)
    avg_bmps = []
    last_ten = []
    count = 0
    avg = 0
    ok = True
    now = time.perf_counter()
    then = now
    try:
        while True:
            response = ser.readline().decode("utf-8").strip()
            if response:
                data = int(response.split(",")[-1])
                serW.write(response.encode() + b'\n')
                data_write = data  # Update global variable with the latest data
                if len(last_ten) >= 50:
                    last_ten.pop(0)
                last_ten.append(data)
                avg = int(sum(last_ten) / len(last_ten))
                if ok and data >= avg + 3:
                    then = now
                    now = time.perf_counter()
                    if int(60 / (now - then)) > 220:
                        continue
                    count += 1
                    print("heartbeat", count)
                    if len(avg_bmps) >= 60:
                        avg_bmps.pop(0)
                    avg_bmps.append(60 / (now - then))
                    print(60 / (now - then))
                    print("avg", sum(avg_bmps) / len(avg_bmps))
                    ok = False
                elif not ok:
                    now = time.perf_counter()
                    if int(60 / (now - then)) < 220 and data <= avg + 3:
                        ok = True
    finally:
        ser.close()


def live_plot():
    global data_write
    # Initialize empty lists to store x and y data
    x_data = []
    y_data = []

    # Initialize figure and axis
    fig, ax = plt.subplots()

    # Initialize plot with empty data
    line, = ax.plot([], [], lw=2)

    # Set initial x-axis limits
    x_count = 0
    x_max = 60
    ax.set_xlim(x_count, x_max)

    # Function to update the plot
    def update_plot(new_y):
        nonlocal x_data, y_data, x_count, x_max

        # Append new data points
        x_data.append(x_count)
        y_data.append(new_y)

        # If more than 60 data points, remove the oldest ones
        if len(x_data) > 60:
            x_data.pop(0)
            y_data.pop(0)

        # Update x and y data of the plot
        line.set_data(x_data, y_data)

        # Update x-axis limits
        x_count += 1
        if x_max - 10 == x_count:
            x_max += 1
        ax.set_xlim(x_max - 60, x_max)

        # Calculate the average of the last 60 data points
        avg_y = np.mean(y_data)

        # Set y-axis limit dynamically based on the average
        ax.set_ylim(avg_y - 15, avg_y + 25)

        # Redraw the plot
        fig.canvas.draw()
        plt.pause(0.00001)

    # Generate initial data for the plot
    update_plot(data_write)

    # Update the plot periodically with the latest data
    while True:
        update_plot(data_write)


def main():
    serW = serial.Serial("COM4", 115200, timeout=1)

    # Start get_bpm function in a thread
    get_bpm_thread = threading.Thread(target=get_bpm, args=(serW,))
    get_bpm_thread.start()

    # Call live_plot function in the main thread
    live_plot()


if __name__ == "__main__":
    main()
