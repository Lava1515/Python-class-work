i have this code :
import socket
import threading
import time
import tkinter as tk
from tkinter import messagebox
from tkinter.simpledialog import askstring

import matplotlib.pyplot as plt
import numpy as np
import serial

from protocol import Protocol
from WebSockets import Web_Socket


class WebSocket(Web_Socket):
    def __init__(self):
        super().__init__()
        self.client_name = None
        self.ip = None
        self.random_str = None

    def handle_client(self, client_socket):
        self.accept_connection(client_socket)
        self.client_name, self.ip, self.random_str = self.receive_data(client_socket).split("//")
        print(self.client_name, self.ip, self.random_str)

    def start_websockets(self):
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind(('0.0.0.0', 8080))
        server_socket.listen()

        print("WebSocket server running on port 8080")
        # accept only one client cus its only lookback
        client_socket, addr = server_socket.accept()
        print(f"Connection from {addr}")
        self.handle_client(client_socket)
        print(".client_name", self.client_name)
        return client_socket


class Client:
    def __init__(self):
        self.host = "127.0.0.1"
        self.port = 5555
        self.socket = Protocol()

        self.WebSocket = WebSocket()
        self.client_socket = self.WebSocket.start_websockets()
        print("WebSocket.client_name", self.WebSocket.client_name)
        if not self.connect():
            self.WebSocket.send_data(self.client_socket, "Error: Failed to connect to the server")
            messagebox.showerror("Error", "Failed to connect to the server")
            return

        DesktopApp(self.socket, self.WebSocket.client_name)

    def connect(self):
        try:
            print(self.host, self.port)
            self.socket.connect((self.host, self.port))
            return True
        except Exception as e:
            print(f"Failed to connect: {e}")
            return False

    def send_login_details(self, username, password):
        try:
            self.socket.send_msg(f"Login:{username},{password}")
            response = self.socket.get_msg().decode()
            return response
        except Exception as e:
            print(f"Error during communication: {e}")
            return "Error"


class DesktopApp:
    def __init__(self, _socket, username):
        self.username = username
        self.socket = _socket
        self.data_write = 0
        self.threads = []

        self.root = tk.Tk()
        self.root.title("12 Grade Project")
        self.root.geometry("450x400")
        self.root.configure(bg="#6b0202")
        self.bpm_label = None
        self.run_functionality()
        self.root.mainloop()

    @staticmethod
    def get_ip():
        # :todo get the server ip
        ip = None
        # ip = askstring("IP Address", "Enter the IP address of the server:")
        return ip

    def send_bpm(self, bpm):
        self.bpm_label.config(text=bpm)
        self.socket.send_msg("bpm:" + bpm)

    def mock_heartrate(self):
        heartrate = ["100"]

        last_ten = []
        avg_bmps = []
        now = time.perf_counter()
        then = now
        i = 0
        count = 0
        ok = True
        while True:
            data = int(heartrate[i])
            self.data_write = data
            if len(last_ten) >= 50:
                last_ten.pop(0)
            last_ten.append(data)
            avg = int(sum(last_ten) / len(last_ten))
            if ok and data >= avg + 3:
                then = now
                now = time.perf_counter()
                if int(60 / (now - then)) > 220:
                    continue
                count += 1
                print("heartbeat", count)
                if len(avg_bmps) >= 60:
                    avg_bmps.pop(0)
                avg_bmps.append(60 / (now - then))
                print(60 / (now - then))
                self.send_bpm(str(int(60 / (now - then))))
                print("avg", sum(avg_bmps) / len(avg_bmps))
                ok = False
            elif not ok:
                now = time.perf_counter()
                if int(60 / (now - then)) < 220 and data <= avg + 3:
                    ok = True
            i += 1
            if i == len(heartrate):
                i = 0
            time.sleep(0.02)

    def get_bpm(self):
        serW = serial.Serial("COM4", 115200, timeout=1)
        ser = serial.Serial("COM3", 115200, timeout=1)
        avg_bmps = []
        last_ten = []
        count = 0
        ok = True
        now = time.perf_counter()
        then = now
        try:
            while True:
                response = ser.readline().decode("utf-8").strip()
                if response:
                    data = int(response.split(",")[-1])
                    serW.write(response.encode() + b'\n')
                    self.data_write = data  # Update global variable with the latest data
                    if len(last_ten) >= 50:
                        last_ten.pop(0)
                    last_ten.append(data)
                    avg = int(sum(last_ten) / len(last_ten))
                    if ok and data >= avg + 3:
                        then = now
                        now = time.perf_counter()
                        if int(60 / (now - then)) > 220:
                            continue
                        count += 1
                        print("heartbeat", count)
                        if len(avg_bmps) >= 60:
                            avg_bmps.pop(0)
                        avg_bmps.append(60 / (now - then))
                        bpm = 60 / (now - then)
                        print("bpm", bpm)
                        print("avg", sum(avg_bmps) / len(avg_bmps))
                        ok = False
                    elif not ok:
                        now = time.perf_counter()
                        if int(60 / (now - then)) < 220 and data <= avg + 3:
                            ok = True
        finally:
            ser.close()

    def run_functionality(self):
        # Call live_plot function in the main thread
        # live_plot_thread = threading.Thread(target=self.add_bmp_window, args=(self.username,))
        # live_plot_thread.start()
        # self.threads.append(live_plot_thread)
        self.additional_bmp_window()

        # Start get_bpm function in a thread
        get_bpm_thread = threading.Thread(target=self.mock_heartrate)
        get_bpm_thread.start()
        self.threads.append(get_bpm_thread)

        self.live_plot()
        # live_plot_thread = threading.Thread(target=self.live_plot)
        # live_plot_thread.start()
        # self.threads.append(live_plot_thread)

        # self.mock_heartrate()

    def live_plot(self):
        # Initialize empty lists to store x and y data
        x_data = []
        y_data = []

        # Initialize figure and axis
        fig, ax = plt.subplots()

        # Initialize plot with empty data
        line, = ax.plot([], [], lw=2)

        # Set initial x-axis limits
        x_count = 0
        x_max = 60
        ax.set_xlim(x_count, x_max)

        # Function to update the plot
        def update_plot():
            nonlocal x_data, y_data, x_count, x_max

            # Append new data points
            x_data.append(x_count)
            y_data.append(self.data_write)

            # If more than 60 data points, remove the oldest ones
            if len(x_data) > 60:
                x_data.pop(0)
                y_data.pop(0)

            # Update x and y data of the plot
            line.set_data(x_data, y_data)

            # Update x-axis limits
            x_count += 1
            if x_max - 10 == x_count:
                x_max += 1
            ax.set_xlim(x_max - 60, x_max)

            # Calculate the average of the last 60 data points
            avg_y = np.mean(y_data)

            # Set y-axis limit dynamically based on the average
            ax.set_ylim(avg_y - 15, avg_y + 25)

            # Redraw the plot
            fig.canvas.draw()
            plt.pause(0.00001)

        # Generate initial data for the plot
        update_plot()

        # Update the plot periodically with the latest data
        while True:
            update_plot()

    def additional_bmp_window(self):
        logedas = tk.Label(self.root, text="Loged as, " + self.username, font=("Arial", 14), bg="#6b0202", fg="white")
        logedas.pack(pady=5)
        bmp_label = tk.Label(self.root, text="Bpm", font=("Arial", 14), bg="#6b0202", fg="white")
        bmp_label.pack(pady=5)
        self.bpm_label = tk.Label(self.root, text="0", font=("Arial", 14), bg="#6b0202", fg="white")
        self.bpm_label.pack(pady=5)

    def on_closing(self):
        # Handle any cleanup here
        for thread in self.threads:
            if thread.is_alive():
                thread.join()  # Adjust the timeout as needed
        self.root.destroy()


if __name__ == "__main__":
    Client()



and this error :
Exception in thread Thread-1 (mock_heartrate):
Traceback (most recent call last):
  File "C:\Users\Lava\AppData\Local\Programs\Python\Python312\Lib\threading.py", line 1052, in _bootstrap_inner
    self.run()
  File "C:\Users\Lava\AppData\Local\Programs\Python\Python312\Lib\threading.py", line 989, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Users\Lava\PycharmProjects\Python-class-work\12_grade\12_grade_project\login.py", line 232, in mock_heartrate
    self.send_bpm(str(int(60 / (now - then))))
  File "C:\Users\Lava\PycharmProjects\Python-class-work\12_grade\12_grade_project\login.py", line 100, in send_bpm
    self.bpm_label.config(text=bpm)
  File "C:\Users\Lava\AppData\Local\Programs\Python\Python312\Lib\tkinter\__init__.py", line 1702, in configure
    return self._configure('configure', cnf, kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lava\AppData\Local\Programs\Python\Python312\Lib\tkinter\__init__.py", line 1692, in _configure
    self.tk.call(_flatten((self._w, cmd)) + self._options(cnf))
RuntimeError: main thread is not in main loop




i think it can be fixed if u put the live_plot in a difrent procces can u write me acode of that and pls write the whole code